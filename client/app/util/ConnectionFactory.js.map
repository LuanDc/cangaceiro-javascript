{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","forEach","store","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;;AAEA,gBAAIC,aAAa,IAAjB;;AAEA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CAAwB;;AAE3BC,8BAAc;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;;AAEnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,4BAAGR,UAAH,EAAe,OAAOO,QAAQP,UAAR,CAAP;;AAEf,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;;AAE/Bd,mCAAOe,OAAP,CAAeC,SAAS;;AAEpBb,kDAAkBc,aAAlB,CAAgCH,EAAEI,MAAF,CAASC,MAAzC;AACH,6BAHD;AAIH,yBAND;;AAQAT,oCAAYU,SAAZ,GAAwBN,KAAK;;AAEzBb,yCAAaa,EAAEI,MAAF,CAASC,MAAtB;;AAEAjB,oCAAQD,WAAWC,KAAX,CAAiBmB,IAAjB,CAAsBpB,UAAtB,CAAR;;AAEAA,uCAAWC,KAAX,GAAmB,MAAM;;AAErB,sCAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAHD;AAIAG,oCAAQM,EAAEI,MAAF,CAASC,MAAjB;AACH,yBAXD;;AAaAT,oCAAYY,OAAZ,GAAsBR,KAAK;;AAEvBS,oCAAQC,GAAR,CAAYV,EAAEI,MAAF,CAASO,KAArB;AACAhB,mCAAOK,EAAEI,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAJD;AAKH,qBAhCM,CAAP;AAiCH;;AAED,uBAAOT,aAAP,CAAqBhB,UAArB,EAAiC;;AAE7BD,2BAAOe,OAAP,CAAeC,SAAS;;AAEpB,4BAAGf,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCZ,KAArC,CAAH,EACIf,WAAW4B,iBAAX,CAA6Bb,KAA7B;;AAEJf,mCAAW6B,iBAAX,CAA6Bd,KAA7B,EAAoC,EAAEe,eAAe,IAAjB,EAApC;AACH,qBAND;AAOH;;AAED,uBAAOC,eAAP,GAAyB;;AAErB,wBAAG/B,UAAH,EAAe;AACXC;AACH;AACJ;AA5D0B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n\n        throw new Error('Não é possível criar instâncias dessa classe');\n    } \n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            if(connection) return resolve(connection);\n\n            const openRequest = indexedDB.open('jscangaceiro', 2);\n\n            openRequest.onupgradeneeded = e => {\n\n                stores.forEach(store => {\n\n                    ConnectionFactory._createStores(e.target.result);\n                });\n            };\n\n            openRequest.onsuccess = e => {\n\n                connection = e.target.result;\n\n                close = connection.close.bind(connection);\n\n                connection.close = () => {\n\n                    throw new Error('Você não pode fechar diretamente a conexão');\n                };\n                resolve(e.target.result);\n            };\n\n            openRequest.onerror = e => {\n\n                console.log(e.target.error)\n                reject(e.target.error.name)\n            };\n        });\n    }\n\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if(connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection() {\n\n        if(connection) {\n            close();\n        }\n    }\n}\n"]}